// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package fluent_test

import (
	"github.com/usalko/fluent/flc/integration/gremlin/fluent"
	// required by schema hooks.
	_ "github.com/usalko/fluent/flc/integration/gremlin/fluent/runtime"
)

type (
	// TestingT is the interface that is shared between
	// testing.T and testing.B and used by fluent_test.
	TestingT interface {
		FailNow()
		Error(...any)
	}

	// Option configures client creation.
	Option func(*options)

	options struct {
		opts []fluent.Option
	}
)

// WithOptions forwards options to client creation.
func WithOptions(opts ...fluent.Option) Option {
	return func(o *options) {
		o.opts = append(o.opts, opts...)
	}
}

func newOptions(opts []Option) *options {
	o := &options{}
	for _, opt := range opts {
		opt(o)
	}
	return o
}

// Open calls fluent.Open and auto-run migration.
func Open(t TestingT, driverName, dataSourceName string, opts ...Option) *fluent.Client {
	o := newOptions(opts)
	c, err := fluent.Open(driverName, dataSourceName, o.opts...)
	if err != nil {
		t.Error(err)
		t.FailNow()
	}
	return c
}

// NewClient calls fluent.NewClient and auto-run migration.
func NewClient(t TestingT, opts ...Option) *fluent.Client {
	o := newOptions(opts)
	c := fluent.NewClient(o.opts...)
	return c
}
