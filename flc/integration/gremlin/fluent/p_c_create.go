// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package fluent

import (
	"context"

	"github.com/usalko/fluent/dialect/gremlin"
	"github.com/usalko/fluent/dialect/gremlin/graph/dsl"
	"github.com/usalko/fluent/dialect/gremlin/graph/dsl/g"
	"github.com/usalko/fluent/flc/integration/gremlin/fluent/p_c"
)

// PCCreate is the builder for creating a PC entity.
type PCCreate struct {
	config
	mutation *PCMutation
	hooks    []Hook
}

// Mutation returns the PCMutation object of the builder.
func (pc *PCCreate) Mutation() *PCMutation {
	return pc.mutation
}

// Save creates the PC in the database.
func (pc *PCCreate) Save(ctx context.Context) (*PC, error) {
	return withHooks(ctx, pc.gremlinSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PCCreate) SaveX(ctx context.Context) *PC {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PCCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PCCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PCCreate) check() error {
	return nil
}

func (pc *PCCreate) gremlinSave(ctx context.Context) (*PC, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	res := &gremlin.Response{}
	query, bindings := pc.gremlin().Query()
	if err := pc.driver.Exec(ctx, query, bindings, res); err != nil {
		return nil, err
	}
	if err, ok := isConstantError(res); ok {
		return nil, err
	}
	rnode := &PC{config: pc.config}
	if err := rnode.FromResponse(res); err != nil {
		return nil, err
	}
	pc.mutation.id = &rnode.ID
	pc.mutation.done = true
	return rnode, nil
}

func (pc *PCCreate) gremlin() *dsl.Traversal {
	v := g.AddV(p_c.Label)
	return v.ValueMap(true)
}

// PCCreateBulk is the builder for creating many PC entities in bulk.
type PCCreateBulk struct {
	config
	err      error
	builders []*PCCreate
}
