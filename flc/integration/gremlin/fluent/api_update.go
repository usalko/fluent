// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package fluent

import (
	"context"
	"errors"

	"github.com/usalko/fluent/dialect/gremlin"
	"github.com/usalko/fluent/dialect/gremlin/graph/dsl"
	"github.com/usalko/fluent/dialect/gremlin/graph/dsl/g"
	"github.com/usalko/fluent/flc/integration/gremlin/fluent/api"
	"github.com/usalko/fluent/flc/integration/gremlin/fluent/predicate"
)

// APIUpdate is the builder for updating Api entities.
type APIUpdate struct {
	config
	hooks    []Hook
	mutation *APIMutation
}

// Where appends a list predicates to the APIUpdate builder.
func (a *APIUpdate) Where(ps ...predicate.Api) *APIUpdate {
	a.mutation.Where(ps...)
	return a
}

// Mutation returns the APIMutation object of the builder.
func (a *APIUpdate) Mutation() *APIMutation {
	return a.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (a *APIUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, a.gremlinSave, a.mutation, a.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (a *APIUpdate) SaveX(ctx context.Context) int {
	affected, err := a.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (a *APIUpdate) Exec(ctx context.Context) error {
	_, err := a.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (a *APIUpdate) ExecX(ctx context.Context) {
	if err := a.Exec(ctx); err != nil {
		panic(err)
	}
}

func (a *APIUpdate) gremlinSave(ctx context.Context) (int, error) {
	res := &gremlin.Response{}
	query, bindings := a.gremlin().Query()
	if err := a.driver.Exec(ctx, query, bindings, res); err != nil {
		return 0, err
	}
	if err, ok := isConstantError(res); ok {
		return 0, err
	}
	a.mutation.done = true
	return res.ReadInt()
}

func (a *APIUpdate) gremlin() *dsl.Traversal {
	v := g.V().HasLabel(api.Label)
	for _, p := range a.mutation.predicates {
		p(v)
	}
	var (
		trs []*dsl.Traversal
	)
	v.Count()
	trs = append(trs, v)
	return dsl.Join(trs...)
}

// APIUpdateOne is the builder for updating a single Api entity.
type APIUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *APIMutation
}

// Mutation returns the APIMutation object of the builder.
func (ao *APIUpdateOne) Mutation() *APIMutation {
	return ao.mutation
}

// Where appends a list predicates to the APIUpdate builder.
func (ao *APIUpdateOne) Where(ps ...predicate.Api) *APIUpdateOne {
	ao.mutation.Where(ps...)
	return ao
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ao *APIUpdateOne) Select(field string, fields ...string) *APIUpdateOne {
	ao.fields = append([]string{field}, fields...)
	return ao
}

// Save executes the query and returns the updated Api entity.
func (ao *APIUpdateOne) Save(ctx context.Context) (*Api, error) {
	return withHooks(ctx, ao.gremlinSave, ao.mutation, ao.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ao *APIUpdateOne) SaveX(ctx context.Context) *Api {
	node, err := ao.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ao *APIUpdateOne) Exec(ctx context.Context) error {
	_, err := ao.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ao *APIUpdateOne) ExecX(ctx context.Context) {
	if err := ao.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ao *APIUpdateOne) gremlinSave(ctx context.Context) (*Api, error) {
	res := &gremlin.Response{}
	id, ok := ao.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`fluent: missing "Api.id" for update`)}
	}
	query, bindings := ao.gremlin(id).Query()
	if err := ao.driver.Exec(ctx, query, bindings, res); err != nil {
		return nil, err
	}
	if err, ok := isConstantError(res); ok {
		return nil, err
	}
	ao.mutation.done = true
	a := &Api{config: ao.config}
	if err := a.FromResponse(res); err != nil {
		return nil, err
	}
	return a, nil
}

func (ao *APIUpdateOne) gremlin(id string) *dsl.Traversal {
	v := g.V(id)
	var (
		trs []*dsl.Traversal
	)
	if len(ao.fields) > 0 {
		fields := make([]any, 0, len(ao.fields)+1)
		fields = append(fields, true)
		for _, f := range ao.fields {
			fields = append(fields, f)
		}
		v.ValueMap(fields...)
	} else {
		v.ValueMap(true)
	}
	trs = append(trs, v)
	return dsl.Join(trs...)
}
