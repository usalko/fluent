// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package fluent

import (
	"context"
	"errors"

	"github.com/usalko/fluent/dialect/gremlin"
	"github.com/usalko/fluent/dialect/gremlin/graph/dsl"
	"github.com/usalko/fluent/dialect/gremlin/graph/dsl/g"
	"github.com/usalko/fluent/flc/integration/gremlin/fluent/pc"
	"github.com/usalko/fluent/flc/integration/gremlin/fluent/predicate"
)

// PCUpdate is the builder for updating PC entities.
type PCUpdate struct {
	config
	hooks    []Hook
	mutation *PCMutation
}

// Where appends a list predicates to the PCUpdate builder.
func (_pc *PCUpdate) Where(ps ...predicate.PC) *PCUpdate {
	_pc.mutation.Where(ps...)
	return _pc
}

// Mutation returns the PCMutation object of the builder.
func (_pc *PCUpdate) Mutation() *PCMutation {
	return _pc.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_pc *PCUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _pc.gremlinSave, _pc.mutation, _pc.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_pc *PCUpdate) SaveX(ctx context.Context) int {
	affected, err := _pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_pc *PCUpdate) Exec(ctx context.Context) error {
	_, err := _pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_pc *PCUpdate) ExecX(ctx context.Context) {
	if err := _pc.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_pc *PCUpdate) gremlinSave(ctx context.Context) (int, error) {
	res := &gremlin.Response{}
	query, bindings := _pc.gremlin().Query()
	if err := _pc.driver.Exec(ctx, query, bindings, res); err != nil {
		return 0, err
	}
	if err, ok := isConstantError(res); ok {
		return 0, err
	}
	_pc.mutation.done = true
	return res.ReadInt()
}

func (_pc *PCUpdate) gremlin() *dsl.Traversal {
	v := g.V().HasLabel(pc.Label)
	for _, p := range _pc.mutation.predicates {
		p(v)
	}
	var (
		trs []*dsl.Traversal
	)
	v.Count()
	trs = append(trs, v)
	return dsl.Join(trs...)
}

// PCUpdateOne is the builder for updating a single PC entity.
type PCUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PCMutation
}

// Mutation returns the PCMutation object of the builder.
func (po *PCUpdateOne) Mutation() *PCMutation {
	return po.mutation
}

// Where appends a list predicates to the PCUpdate builder.
func (po *PCUpdateOne) Where(ps ...predicate.PC) *PCUpdateOne {
	po.mutation.Where(ps...)
	return po
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (po *PCUpdateOne) Select(field string, fields ...string) *PCUpdateOne {
	po.fields = append([]string{field}, fields...)
	return po
}

// Save executes the query and returns the updated PC entity.
func (po *PCUpdateOne) Save(ctx context.Context) (*PC, error) {
	return withHooks(ctx, po.gremlinSave, po.mutation, po.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (po *PCUpdateOne) SaveX(ctx context.Context) *PC {
	node, err := po.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (po *PCUpdateOne) Exec(ctx context.Context) error {
	_, err := po.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (po *PCUpdateOne) ExecX(ctx context.Context) {
	if err := po.Exec(ctx); err != nil {
		panic(err)
	}
}

func (po *PCUpdateOne) gremlinSave(ctx context.Context) (*PC, error) {
	res := &gremlin.Response{}
	id, ok := po.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`fluent: missing "PC.id" for update`)}
	}
	query, bindings := po.gremlin(id).Query()
	if err := po.driver.Exec(ctx, query, bindings, res); err != nil {
		return nil, err
	}
	if err, ok := isConstantError(res); ok {
		return nil, err
	}
	po.mutation.done = true
	_pc := &PC{config: po.config}
	if err := _pc.FromResponse(res); err != nil {
		return nil, err
	}
	return _pc, nil
}

func (po *PCUpdateOne) gremlin(id string) *dsl.Traversal {
	v := g.V(id)
	var (
		trs []*dsl.Traversal
	)
	if len(po.fields) > 0 {
		fields := make([]any, 0, len(po.fields)+1)
		fields = append(fields, true)
		for _, f := range po.fields {
			fields = append(fields, f)
		}
		v.ValueMap(fields...)
	} else {
		v.ValueMap(true)
	}
	trs = append(trs, v)
	return dsl.Join(trs...)
}
