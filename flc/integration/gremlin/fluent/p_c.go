// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package fluent

import (
	"fmt"
	"strings"

	"github.com/usalko/fluent/dialect/gremlin"
)

// PC is the model entity for the PC schema.
type PC struct {
	config
	// ID of the fluent.
	ID string `json:"id,omitempty"`
}

// FromResponse scans the gremlin response data into PC.
func (pc *PC) FromResponse(res *gremlin.Response) error {
	vmap, err := res.ReadValueMap()
	if err != nil {
		return err
	}
	var scanpc struct {
		ID string `json:"id,omitempty"`
	}
	if err := vmap.Decode(&scanpc); err != nil {
		return err
	}
	pc.ID = scanpc.ID
	return nil
}

// Update returns a builder for updating this PC.
// Note that you need to call PC.Unwrap() before calling this method if this PC
// was returned from a transaction, and the transaction was committed or rolled back.
func (pc *PC) Update() *PCUpdateOne {
	return NewPCClient(pc.config).UpdateOne(pc)
}

// Unwrap unwraps the PC entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pc *PC) Unwrap() *PC {
	_tx, ok := pc.config.driver.(*txDriver)
	if !ok {
		panic("fluent: PC is not a transactional entity")
	}
	pc.config.driver = _tx.drv
	return pc
}

// String implements the fmt.Stringer.
func (pc *PC) String() string {
	var builder strings.Builder
	builder.WriteString("PC(")
	builder.WriteString(fmt.Sprintf("id=%v", pc.ID))
	builder.WriteByte(')')
	return builder.String()
}

// PCs is a parsable slice of PC.
type PCs []*PC

// FromResponse scans the gremlin response data into PCs.
func (pc *PCs) FromResponse(res *gremlin.Response) error {
	vmap, err := res.ReadValueMap()
	if err != nil {
		return err
	}
	var scanpc []struct {
		ID string `json:"id,omitempty"`
	}
	if err := vmap.Decode(&scanpc); err != nil {
		return err
	}
	for _, v := range scanpc {
		node := &PC{ID: v.ID}
		*pc = append(*pc, node)
	}
	return nil
}
