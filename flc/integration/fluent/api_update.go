// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package fluent

import (
	"context"
	"errors"
	"fmt"

	"github.com/usalko/fluent/dialect/sql"
	"github.com/usalko/fluent/dialect/sql/sqlgraph"
	"github.com/usalko/fluent/flc/integration/fluent/api"
	"github.com/usalko/fluent/flc/integration/fluent/predicate"
	"github.com/usalko/fluent/schema/field"
)

// APIUpdate is the builder for updating Api entities.
type APIUpdate struct {
	config
	hooks     []Hook
	mutation  *APIMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the APIUpdate builder.
func (a *APIUpdate) Where(ps ...predicate.Api) *APIUpdate {
	a.mutation.Where(ps...)
	return a
}

// Mutation returns the APIMutation object of the builder.
func (a *APIUpdate) Mutation() *APIMutation {
	return a.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (a *APIUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, a.sqlSave, a.mutation, a.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (a *APIUpdate) SaveX(ctx context.Context) int {
	affected, err := a.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (a *APIUpdate) Exec(ctx context.Context) error {
	_, err := a.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (a *APIUpdate) ExecX(ctx context.Context) {
	if err := a.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (a *APIUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *APIUpdate {
	a.modifiers = append(a.modifiers, modifiers...)
	return a
}

func (a *APIUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(api.Table, api.Columns, sqlgraph.NewFieldSpec(api.FieldID, field.TypeInt))
	if ps := a.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	_spec.AddModifiers(a.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, a.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{api.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	a.mutation.done = true
	return n, nil
}

// APIUpdateOne is the builder for updating a single Api entity.
type APIUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *APIMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Mutation returns the APIMutation object of the builder.
func (ao *APIUpdateOne) Mutation() *APIMutation {
	return ao.mutation
}

// Where appends a list predicates to the APIUpdate builder.
func (ao *APIUpdateOne) Where(ps ...predicate.Api) *APIUpdateOne {
	ao.mutation.Where(ps...)
	return ao
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ao *APIUpdateOne) Select(field string, fields ...string) *APIUpdateOne {
	ao.fields = append([]string{field}, fields...)
	return ao
}

// Save executes the query and returns the updated Api entity.
func (ao *APIUpdateOne) Save(ctx context.Context) (*Api, error) {
	return withHooks(ctx, ao.sqlSave, ao.mutation, ao.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ao *APIUpdateOne) SaveX(ctx context.Context) *Api {
	node, err := ao.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ao *APIUpdateOne) Exec(ctx context.Context) error {
	_, err := ao.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ao *APIUpdateOne) ExecX(ctx context.Context) {
	if err := ao.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ao *APIUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *APIUpdateOne {
	ao.modifiers = append(ao.modifiers, modifiers...)
	return ao
}

func (ao *APIUpdateOne) sqlSave(ctx context.Context) (_node *Api, err error) {
	_spec := sqlgraph.NewUpdateSpec(api.Table, api.Columns, sqlgraph.NewFieldSpec(api.FieldID, field.TypeInt))
	id, ok := ao.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`fluent: missing "Api.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ao.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, api.FieldID)
		for _, f := range fields {
			if !api.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("fluent: invalid field %q for query", f)}
			}
			if f != api.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ao.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	_spec.AddModifiers(ao.modifiers...)
	_node = &Api{config: ao.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ao.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{api.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ao.mutation.done = true
	return _node, nil
}
