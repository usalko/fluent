// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package fluent

import (
	"context"

	"github.com/usalko/fluent/dialect/sql"
	"github.com/usalko/fluent/dialect/sql/sqlgraph"
	"github.com/usalko/fluent/flc/integration/fluent/pc"
	"github.com/usalko/fluent/flc/integration/fluent/predicate"
	"github.com/usalko/fluent/schema/field"
)

// PCDelete is the builder for deleting a PC entity.
type PCDelete struct {
	config
	hooks    []Hook
	mutation *PCMutation
}

// Where appends a list predicates to the PCDelete builder.
func (_pc *PCDelete) Where(ps ...predicate.PC) *PCDelete {
	_pc.mutation.Where(ps...)
	return _pc
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (_pc *PCDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, _pc.sqlExec, _pc.mutation, _pc.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (_pc *PCDelete) ExecX(ctx context.Context) int {
	n, err := _pc.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (_pc *PCDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(pc.Table, sqlgraph.NewFieldSpec(pc.FieldID, field.TypeInt))
	if ps := _pc.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, _pc.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	_pc.mutation.done = true
	return affected, err
}

// PCDeleteOne is the builder for deleting a single PC entity.
type PCDeleteOne struct {
	_pc *PCDelete
}

// Where appends a list predicates to the PCDelete builder.
func (po *PCDeleteOne) Where(ps ...predicate.PC) *PCDeleteOne {
	po._pc.mutation.Where(ps...)
	return po
}

// Exec executes the deletion query.
func (po *PCDeleteOne) Exec(ctx context.Context) error {
	n, err := po._pc.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{pc.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (po *PCDeleteOne) ExecX(ctx context.Context) {
	if err := po.Exec(ctx); err != nil {
		panic(err)
	}
}
