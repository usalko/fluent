// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package fluent

import (
	"fmt"
	"math/big"
	"net/url"
	"strings"

	"github.com/usalko/fluent"
	"github.com/usalko/fluent/dialect/sql"
	"github.com/usalko/fluent/flc/integration/fluent/ex_value_scan"
)

// ExValueScan is the model entity for the ExValueScan schema.
type ExValueScan struct {
	config `json:"-"`
	// ID of the fluent.
	ID int `json:"id,omitempty"`
	// Binary holds the value of the "binary" field.
	Binary *url.URL `json:"binary,omitempty"`
	// BinaryBytes holds the value of the "binary_bytes" field.
	BinaryBytes *url.URL `json:"binary_bytes,omitempty"`
	// BinaryOptional holds the value of the "binary_optional" field.
	BinaryOptional *url.URL `json:"binary_optional,omitempty"`
	// Text holds the value of the "text" field.
	Text *big.Int `json:"text,omitempty"`
	// TextOptional holds the value of the "text_optional" field.
	TextOptional *big.Int `json:"text_optional,omitempty"`
	// Base64 holds the value of the "base64" field.
	Base64 string `json:"base64,omitempty"`
	// Custom holds the value of the "custom" field.
	Custom string `json:"custom,omitempty"`
	// CustomOptional holds the value of the "custom_optional" field.
	CustomOptional string `json:"custom_optional,omitempty"`
	selectValues   sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ExValueScan) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case ex_value_scan.FieldID:
			values[i] = new(sql.NullInt64)
		case ex_value_scan.FieldBinary:
			values[i] = ex_value_scan.ValueScanner.Binary.ScanValue()
		case ex_value_scan.FieldBinaryBytes:
			values[i] = ex_value_scan.ValueScanner.BinaryBytes.ScanValue()
		case ex_value_scan.FieldBinaryOptional:
			values[i] = ex_value_scan.ValueScanner.BinaryOptional.ScanValue()
		case ex_value_scan.FieldText:
			values[i] = ex_value_scan.ValueScanner.Text.ScanValue()
		case ex_value_scan.FieldTextOptional:
			values[i] = ex_value_scan.ValueScanner.TextOptional.ScanValue()
		case ex_value_scan.FieldBase64:
			values[i] = ex_value_scan.ValueScanner.Base64.ScanValue()
		case ex_value_scan.FieldCustom:
			values[i] = ex_value_scan.ValueScanner.Custom.ScanValue()
		case ex_value_scan.FieldCustomOptional:
			values[i] = ex_value_scan.ValueScanner.CustomOptional.ScanValue()
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ExValueScan fields.
func (evs *ExValueScan) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ex_value_scan.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			evs.ID = int(value.Int64)
		case ex_value_scan.FieldBinary:
			if value, err := ex_value_scan.ValueScanner.Binary.FromValue(values[i]); err != nil {
				return err
			} else {
				evs.Binary = value
			}
		case ex_value_scan.FieldBinaryBytes:
			if value, err := ex_value_scan.ValueScanner.BinaryBytes.FromValue(values[i]); err != nil {
				return err
			} else {
				evs.BinaryBytes = value
			}
		case ex_value_scan.FieldBinaryOptional:
			if value, err := ex_value_scan.ValueScanner.BinaryOptional.FromValue(values[i]); err != nil {
				return err
			} else {
				evs.BinaryOptional = value
			}
		case ex_value_scan.FieldText:
			if value, err := ex_value_scan.ValueScanner.Text.FromValue(values[i]); err != nil {
				return err
			} else {
				evs.Text = value
			}
		case ex_value_scan.FieldTextOptional:
			if value, err := ex_value_scan.ValueScanner.TextOptional.FromValue(values[i]); err != nil {
				return err
			} else {
				evs.TextOptional = value
			}
		case ex_value_scan.FieldBase64:
			if value, err := ex_value_scan.ValueScanner.Base64.FromValue(values[i]); err != nil {
				return err
			} else {
				evs.Base64 = value
			}
		case ex_value_scan.FieldCustom:
			if value, err := ex_value_scan.ValueScanner.Custom.FromValue(values[i]); err != nil {
				return err
			} else {
				evs.Custom = value
			}
		case ex_value_scan.FieldCustomOptional:
			if value, err := ex_value_scan.ValueScanner.CustomOptional.FromValue(values[i]); err != nil {
				return err
			} else {
				evs.CustomOptional = value
			}
		default:
			evs.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the fluent.Value that was dynamically selected and assigned to the ExValueScan.
// This includes values selected through modifiers, order, etc.
func (evs *ExValueScan) Value(name string) (fluent.Value, error) {
	return evs.selectValues.Get(name)
}

// Update returns a builder for updating this ExValueScan.
// Note that you need to call ExValueScan.Unwrap() before calling this method if this ExValueScan
// was returned from a transaction, and the transaction was committed or rolled back.
func (evs *ExValueScan) Update() *ExValueScanUpdateOne {
	return NewExValueScanClient(evs.config).UpdateOne(evs)
}

// Unwrap unwraps the ExValueScan entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (evs *ExValueScan) Unwrap() *ExValueScan {
	_tx, ok := evs.config.driver.(*txDriver)
	if !ok {
		panic("fluent: ExValueScan is not a transactional entity")
	}
	evs.config.driver = _tx.drv
	return evs
}

// String implements the fmt.Stringer.
func (evs *ExValueScan) String() string {
	var builder strings.Builder
	builder.WriteString("ExValueScan(")
	builder.WriteString(fmt.Sprintf("id=%v, ", evs.ID))
	builder.WriteString("binary=")
	builder.WriteString(fmt.Sprintf("%v", evs.Binary))
	builder.WriteString(", ")
	builder.WriteString("binary_bytes=")
	builder.WriteString(fmt.Sprintf("%v", evs.BinaryBytes))
	builder.WriteString(", ")
	builder.WriteString("binary_optional=")
	builder.WriteString(fmt.Sprintf("%v", evs.BinaryOptional))
	builder.WriteString(", ")
	builder.WriteString("text=")
	builder.WriteString(fmt.Sprintf("%v", evs.Text))
	builder.WriteString(", ")
	builder.WriteString("text_optional=")
	builder.WriteString(fmt.Sprintf("%v", evs.TextOptional))
	builder.WriteString(", ")
	builder.WriteString("base64=")
	builder.WriteString(evs.Base64)
	builder.WriteString(", ")
	builder.WriteString("custom=")
	builder.WriteString(evs.Custom)
	builder.WriteString(", ")
	builder.WriteString("custom_optional=")
	builder.WriteString(evs.CustomOptional)
	builder.WriteByte(')')
	return builder.String()
}

// ExValueScans is a parsable slice of ExValueScan.
type ExValueScans []*ExValueScan
