// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package fluent

import (
	"context"

	"github.com/usalko/fluent/dialect/sql"
	"github.com/usalko/fluent/dialect/sql/sqlgraph"
	"github.com/usalko/fluent/flc/integration/fluent/api"
	"github.com/usalko/fluent/flc/integration/fluent/predicate"
	"github.com/usalko/fluent/schema/field"
)

// APIDelete is the builder for deleting a Api entity.
type APIDelete struct {
	config
	hooks    []Hook
	mutation *APIMutation
}

// Where appends a list predicates to the APIDelete builder.
func (a *APIDelete) Where(ps ...predicate.Api) *APIDelete {
	a.mutation.Where(ps...)
	return a
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (a *APIDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, a.sqlExec, a.mutation, a.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (a *APIDelete) ExecX(ctx context.Context) int {
	n, err := a.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (a *APIDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(api.Table, sqlgraph.NewFieldSpec(api.FieldID, field.TypeInt))
	if ps := a.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, a.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	a.mutation.done = true
	return affected, err
}

// APIDeleteOne is the builder for deleting a single Api entity.
type APIDeleteOne struct {
	a *APIDelete
}

// Where appends a list predicates to the APIDelete builder.
func (ao *APIDeleteOne) Where(ps ...predicate.Api) *APIDeleteOne {
	ao.a.mutation.Where(ps...)
	return ao
}

// Exec executes the deletion query.
func (ao *APIDeleteOne) Exec(ctx context.Context) error {
	n, err := ao.a.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{api.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ao *APIDeleteOne) ExecX(ctx context.Context) {
	if err := ao.Exec(ctx); err != nil {
		panic(err)
	}
}
