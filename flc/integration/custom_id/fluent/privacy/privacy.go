// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package privacy

import (
	"context"

	"github.com/usalko/fluent/flc/integration/custom_id/fluent"

	"github.com/usalko/fluent/fluent_ql"
	"github.com/usalko/fluent/privacy"
)

var (
	// Allow may be returned by rules to indicate that the policy
	// evaluation should terminate with allow decision.
	Allow = privacy.Allow

	// Deny may be returned by rules to indicate that the policy
	// evaluation should terminate with deny decision.
	Deny = privacy.Deny

	// Skip may be returned by rules to indicate that the policy
	// evaluation should continue to the next rule.
	Skip = privacy.Skip
)

// Allowf returns a formatted wrapped Allow decision.
func Allowf(format string, a ...any) error {
	return privacy.Allowf(format, a...)
}

// Denyf returns a formatted wrapped Deny decision.
func Denyf(format string, a ...any) error {
	return privacy.Denyf(format, a...)
}

// Skipf returns a formatted wrapped Skip decision.
func Skipf(format string, a ...any) error {
	return privacy.Skipf(format, a...)
}

// DecisionContext creates a new context from the given parent context with
// a policy decision attach to it.
func DecisionContext(parent context.Context, decision error) context.Context {
	return privacy.DecisionContext(parent, decision)
}

// DecisionFromContext retrieves the policy decision from the context.
func DecisionFromContext(ctx context.Context) (error, bool) {
	return privacy.DecisionFromContext(ctx)
}

type (
	// Policy groups query and mutation policies.
	Policy = privacy.Policy

	// QueryRule defines the interface deciding whether a
	// query is allowed and optionally modify it.
	QueryRule = privacy.QueryRule
	// QueryPolicy combines multiple query rules into a single policy.
	QueryPolicy = privacy.QueryPolicy

	// MutationRule defines the interface which decides whether a
	// mutation is allowed and optionally modifies it.
	MutationRule = privacy.MutationRule
	// MutationPolicy combines multiple mutation rules into a single policy.
	MutationPolicy = privacy.MutationPolicy
	// MutationRuleFunc type is an adapter which allows the use of
	// ordinary functions as mutation rules.
	MutationRuleFunc = privacy.MutationRuleFunc

	// QueryMutationRule is an interface which groups query and mutation rules.
	QueryMutationRule = privacy.QueryMutationRule
)

// QueryRuleFunc type is an adapter to allow the use of
// ordinary functions as query rules.
type QueryRuleFunc func(context.Context, fluent.Query) error

// Eval returns f(ctx, q).
func (f QueryRuleFunc) EvalQuery(ctx context.Context, q fluent.Query) error {
	return f(ctx, q)
}

// AlwaysAllowRule returns a rule that returns an allow decision.
func AlwaysAllowRule() QueryMutationRule {
	return privacy.AlwaysAllowRule()
}

// AlwaysDenyRule returns a rule that returns a deny decision.
func AlwaysDenyRule() QueryMutationRule {
	return privacy.AlwaysDenyRule()
}

// ContextQueryMutationRule creates a query/mutation rule from a context eval func.
func ContextQueryMutationRule(eval func(context.Context) error) QueryMutationRule {
	return privacy.ContextQueryMutationRule(eval)
}

// OnMutationOperation evaluates the given rule only on a given mutation operation.
func OnMutationOperation(rule MutationRule, op fluent.Op) MutationRule {
	return privacy.OnMutationOperation(rule, op)
}

// DenyMutationOperationRule returns a rule denying specified mutation operation.
func DenyMutationOperationRule(op fluent.Op) MutationRule {
	rule := MutationRuleFunc(func(_ context.Context, m fluent.Mutation) error {
		return Denyf("ent/privacy: operation %s is not allowed", m.Op())
	})
	return OnMutationOperation(rule, op)
}

// The AccountQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AccountQueryRuleFunc func(context.Context, *fluent.AccountQuery) error

// EvalQuery return f(ctx, q).
func (f AccountQueryRuleFunc) EvalQuery(ctx context.Context, q fluent.Query) error {
	if q, ok := q.(*fluent.AccountQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *fluent.AccountQuery", q)
}

// The AccountMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AccountMutationRuleFunc func(context.Context, *fluent.AccountMutation) error

// EvalMutation calls f(ctx, m).
func (f AccountMutationRuleFunc) EvalMutation(ctx context.Context, m fluent.Mutation) error {
	if m, ok := m.(*fluent.AccountMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *fluent.AccountMutation", m)
}

// The BlobQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type BlobQueryRuleFunc func(context.Context, *fluent.BlobQuery) error

// EvalQuery return f(ctx, q).
func (f BlobQueryRuleFunc) EvalQuery(ctx context.Context, q fluent.Query) error {
	if q, ok := q.(*fluent.BlobQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *fluent.BlobQuery", q)
}

// The BlobMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type BlobMutationRuleFunc func(context.Context, *fluent.BlobMutation) error

// EvalMutation calls f(ctx, m).
func (f BlobMutationRuleFunc) EvalMutation(ctx context.Context, m fluent.Mutation) error {
	if m, ok := m.(*fluent.BlobMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *fluent.BlobMutation", m)
}

// The BlobLinkQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type BlobLinkQueryRuleFunc func(context.Context, *fluent.BlobLinkQuery) error

// EvalQuery return f(ctx, q).
func (f BlobLinkQueryRuleFunc) EvalQuery(ctx context.Context, q fluent.Query) error {
	if q, ok := q.(*fluent.BlobLinkQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *fluent.BlobLinkQuery", q)
}

// The BlobLinkMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type BlobLinkMutationRuleFunc func(context.Context, *fluent.BlobLinkMutation) error

// EvalMutation calls f(ctx, m).
func (f BlobLinkMutationRuleFunc) EvalMutation(ctx context.Context, m fluent.Mutation) error {
	if m, ok := m.(*fluent.BlobLinkMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *fluent.BlobLinkMutation", m)
}

// The CarQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CarQueryRuleFunc func(context.Context, *fluent.CarQuery) error

// EvalQuery return f(ctx, q).
func (f CarQueryRuleFunc) EvalQuery(ctx context.Context, q fluent.Query) error {
	if q, ok := q.(*fluent.CarQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *fluent.CarQuery", q)
}

// The CarMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CarMutationRuleFunc func(context.Context, *fluent.CarMutation) error

// EvalMutation calls f(ctx, m).
func (f CarMutationRuleFunc) EvalMutation(ctx context.Context, m fluent.Mutation) error {
	if m, ok := m.(*fluent.CarMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *fluent.CarMutation", m)
}

// The DeviceQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type DeviceQueryRuleFunc func(context.Context, *fluent.DeviceQuery) error

// EvalQuery return f(ctx, q).
func (f DeviceQueryRuleFunc) EvalQuery(ctx context.Context, q fluent.Query) error {
	if q, ok := q.(*fluent.DeviceQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *fluent.DeviceQuery", q)
}

// The DeviceMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type DeviceMutationRuleFunc func(context.Context, *fluent.DeviceMutation) error

// EvalMutation calls f(ctx, m).
func (f DeviceMutationRuleFunc) EvalMutation(ctx context.Context, m fluent.Mutation) error {
	if m, ok := m.(*fluent.DeviceMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *fluent.DeviceMutation", m)
}

// The DocQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type DocQueryRuleFunc func(context.Context, *fluent.DocQuery) error

// EvalQuery return f(ctx, q).
func (f DocQueryRuleFunc) EvalQuery(ctx context.Context, q fluent.Query) error {
	if q, ok := q.(*fluent.DocQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *fluent.DocQuery", q)
}

// The DocMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type DocMutationRuleFunc func(context.Context, *fluent.DocMutation) error

// EvalMutation calls f(ctx, m).
func (f DocMutationRuleFunc) EvalMutation(ctx context.Context, m fluent.Mutation) error {
	if m, ok := m.(*fluent.DocMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *fluent.DocMutation", m)
}

// The GroupQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type GroupQueryRuleFunc func(context.Context, *fluent.GroupQuery) error

// EvalQuery return f(ctx, q).
func (f GroupQueryRuleFunc) EvalQuery(ctx context.Context, q fluent.Query) error {
	if q, ok := q.(*fluent.GroupQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *fluent.GroupQuery", q)
}

// The GroupMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type GroupMutationRuleFunc func(context.Context, *fluent.GroupMutation) error

// EvalMutation calls f(ctx, m).
func (f GroupMutationRuleFunc) EvalMutation(ctx context.Context, m fluent.Mutation) error {
	if m, ok := m.(*fluent.GroupMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *fluent.GroupMutation", m)
}

// The IntSIDQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type IntSIDQueryRuleFunc func(context.Context, *fluent.IntSIDQuery) error

// EvalQuery return f(ctx, q).
func (f IntSIDQueryRuleFunc) EvalQuery(ctx context.Context, q fluent.Query) error {
	if q, ok := q.(*fluent.IntSIDQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *fluent.IntSIDQuery", q)
}

// The IntSIDMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type IntSIDMutationRuleFunc func(context.Context, *fluent.IntSIDMutation) error

// EvalMutation calls f(ctx, m).
func (f IntSIDMutationRuleFunc) EvalMutation(ctx context.Context, m fluent.Mutation) error {
	if m, ok := m.(*fluent.IntSIDMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *fluent.IntSIDMutation", m)
}

// The LinkQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type LinkQueryRuleFunc func(context.Context, *fluent.LinkQuery) error

// EvalQuery return f(ctx, q).
func (f LinkQueryRuleFunc) EvalQuery(ctx context.Context, q fluent.Query) error {
	if q, ok := q.(*fluent.LinkQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *fluent.LinkQuery", q)
}

// The LinkMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type LinkMutationRuleFunc func(context.Context, *fluent.LinkMutation) error

// EvalMutation calls f(ctx, m).
func (f LinkMutationRuleFunc) EvalMutation(ctx context.Context, m fluent.Mutation) error {
	if m, ok := m.(*fluent.LinkMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *fluent.LinkMutation", m)
}

// The MixinIDQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type MixinIDQueryRuleFunc func(context.Context, *fluent.MixinIDQuery) error

// EvalQuery return f(ctx, q).
func (f MixinIDQueryRuleFunc) EvalQuery(ctx context.Context, q fluent.Query) error {
	if q, ok := q.(*fluent.MixinIDQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *fluent.MixinIDQuery", q)
}

// The MixinIDMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type MixinIDMutationRuleFunc func(context.Context, *fluent.MixinIDMutation) error

// EvalMutation calls f(ctx, m).
func (f MixinIDMutationRuleFunc) EvalMutation(ctx context.Context, m fluent.Mutation) error {
	if m, ok := m.(*fluent.MixinIDMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *fluent.MixinIDMutation", m)
}

// The NoteQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type NoteQueryRuleFunc func(context.Context, *fluent.NoteQuery) error

// EvalQuery return f(ctx, q).
func (f NoteQueryRuleFunc) EvalQuery(ctx context.Context, q fluent.Query) error {
	if q, ok := q.(*fluent.NoteQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *fluent.NoteQuery", q)
}

// The NoteMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type NoteMutationRuleFunc func(context.Context, *fluent.NoteMutation) error

// EvalMutation calls f(ctx, m).
func (f NoteMutationRuleFunc) EvalMutation(ctx context.Context, m fluent.Mutation) error {
	if m, ok := m.(*fluent.NoteMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *fluent.NoteMutation", m)
}

// The OtherQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OtherQueryRuleFunc func(context.Context, *fluent.OtherQuery) error

// EvalQuery return f(ctx, q).
func (f OtherQueryRuleFunc) EvalQuery(ctx context.Context, q fluent.Query) error {
	if q, ok := q.(*fluent.OtherQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *fluent.OtherQuery", q)
}

// The OtherMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OtherMutationRuleFunc func(context.Context, *fluent.OtherMutation) error

// EvalMutation calls f(ctx, m).
func (f OtherMutationRuleFunc) EvalMutation(ctx context.Context, m fluent.Mutation) error {
	if m, ok := m.(*fluent.OtherMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *fluent.OtherMutation", m)
}

// The PetQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PetQueryRuleFunc func(context.Context, *fluent.PetQuery) error

// EvalQuery return f(ctx, q).
func (f PetQueryRuleFunc) EvalQuery(ctx context.Context, q fluent.Query) error {
	if q, ok := q.(*fluent.PetQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *fluent.PetQuery", q)
}

// The PetMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PetMutationRuleFunc func(context.Context, *fluent.PetMutation) error

// EvalMutation calls f(ctx, m).
func (f PetMutationRuleFunc) EvalMutation(ctx context.Context, m fluent.Mutation) error {
	if m, ok := m.(*fluent.PetMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *fluent.PetMutation", m)
}

// The RevisionQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type RevisionQueryRuleFunc func(context.Context, *fluent.RevisionQuery) error

// EvalQuery return f(ctx, q).
func (f RevisionQueryRuleFunc) EvalQuery(ctx context.Context, q fluent.Query) error {
	if q, ok := q.(*fluent.RevisionQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *fluent.RevisionQuery", q)
}

// The RevisionMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type RevisionMutationRuleFunc func(context.Context, *fluent.RevisionMutation) error

// EvalMutation calls f(ctx, m).
func (f RevisionMutationRuleFunc) EvalMutation(ctx context.Context, m fluent.Mutation) error {
	if m, ok := m.(*fluent.RevisionMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *fluent.RevisionMutation", m)
}

// The SessionQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type SessionQueryRuleFunc func(context.Context, *fluent.SessionQuery) error

// EvalQuery return f(ctx, q).
func (f SessionQueryRuleFunc) EvalQuery(ctx context.Context, q fluent.Query) error {
	if q, ok := q.(*fluent.SessionQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *fluent.SessionQuery", q)
}

// The SessionMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type SessionMutationRuleFunc func(context.Context, *fluent.SessionMutation) error

// EvalMutation calls f(ctx, m).
func (f SessionMutationRuleFunc) EvalMutation(ctx context.Context, m fluent.Mutation) error {
	if m, ok := m.(*fluent.SessionMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *fluent.SessionMutation", m)
}

// The TokenQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type TokenQueryRuleFunc func(context.Context, *fluent.TokenQuery) error

// EvalQuery return f(ctx, q).
func (f TokenQueryRuleFunc) EvalQuery(ctx context.Context, q fluent.Query) error {
	if q, ok := q.(*fluent.TokenQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *fluent.TokenQuery", q)
}

// The TokenMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type TokenMutationRuleFunc func(context.Context, *fluent.TokenMutation) error

// EvalMutation calls f(ctx, m).
func (f TokenMutationRuleFunc) EvalMutation(ctx context.Context, m fluent.Mutation) error {
	if m, ok := m.(*fluent.TokenMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *fluent.TokenMutation", m)
}

// The UserQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type UserQueryRuleFunc func(context.Context, *fluent.UserQuery) error

// EvalQuery return f(ctx, q).
func (f UserQueryRuleFunc) EvalQuery(ctx context.Context, q fluent.Query) error {
	if q, ok := q.(*fluent.UserQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *fluent.UserQuery", q)
}

// The UserMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type UserMutationRuleFunc func(context.Context, *fluent.UserMutation) error

// EvalMutation calls f(ctx, m).
func (f UserMutationRuleFunc) EvalMutation(ctx context.Context, m fluent.Mutation) error {
	if m, ok := m.(*fluent.UserMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *fluent.UserMutation", m)
}

type (
	// Filter is the interface that wraps the Where function
	// for filtering nodes in queries and mutations.
	Filter interface {
		// Where applies a filter on the executed query/mutation.
		Where(fluent_ql.P)
	}

	// The FilterFunc type is an adapter that allows the use of ordinary
	// functions as filters for query and mutation types.
	FilterFunc func(context.Context, Filter) error
)

// EvalQuery calls f(ctx, q) if the query implements the Filter interface, otherwise it is denied.
func (f FilterFunc) EvalQuery(ctx context.Context, q fluent.Query) error {
	fr, err := queryFilter(q)
	if err != nil {
		return err
	}
	return f(ctx, fr)
}

// EvalMutation calls f(ctx, q) if the mutation implements the Filter interface, otherwise it is denied.
func (f FilterFunc) EvalMutation(ctx context.Context, m fluent.Mutation) error {
	fr, err := mutationFilter(m)
	if err != nil {
		return err
	}
	return f(ctx, fr)
}

var _ QueryMutationRule = FilterFunc(nil)

func queryFilter(q fluent.Query) (Filter, error) {
	switch q := q.(type) {
	case *fluent.AccountQuery:
		return q.Filter(), nil
	case *fluent.BlobQuery:
		return q.Filter(), nil
	case *fluent.BlobLinkQuery:
		return q.Filter(), nil
	case *fluent.CarQuery:
		return q.Filter(), nil
	case *fluent.DeviceQuery:
		return q.Filter(), nil
	case *fluent.DocQuery:
		return q.Filter(), nil
	case *fluent.GroupQuery:
		return q.Filter(), nil
	case *fluent.IntSIDQuery:
		return q.Filter(), nil
	case *fluent.LinkQuery:
		return q.Filter(), nil
	case *fluent.MixinIDQuery:
		return q.Filter(), nil
	case *fluent.NoteQuery:
		return q.Filter(), nil
	case *fluent.OtherQuery:
		return q.Filter(), nil
	case *fluent.PetQuery:
		return q.Filter(), nil
	case *fluent.RevisionQuery:
		return q.Filter(), nil
	case *fluent.SessionQuery:
		return q.Filter(), nil
	case *fluent.TokenQuery:
		return q.Filter(), nil
	case *fluent.UserQuery:
		return q.Filter(), nil
	default:
		return nil, Denyf("ent/privacy: unexpected query type %T for query filter", q)
	}
}

func mutationFilter(m fluent.Mutation) (Filter, error) {
	switch m := m.(type) {
	case *fluent.AccountMutation:
		return m.Filter(), nil
	case *fluent.BlobMutation:
		return m.Filter(), nil
	case *fluent.BlobLinkMutation:
		return m.Filter(), nil
	case *fluent.CarMutation:
		return m.Filter(), nil
	case *fluent.DeviceMutation:
		return m.Filter(), nil
	case *fluent.DocMutation:
		return m.Filter(), nil
	case *fluent.GroupMutation:
		return m.Filter(), nil
	case *fluent.IntSIDMutation:
		return m.Filter(), nil
	case *fluent.LinkMutation:
		return m.Filter(), nil
	case *fluent.MixinIDMutation:
		return m.Filter(), nil
	case *fluent.NoteMutation:
		return m.Filter(), nil
	case *fluent.OtherMutation:
		return m.Filter(), nil
	case *fluent.PetMutation:
		return m.Filter(), nil
	case *fluent.RevisionMutation:
		return m.Filter(), nil
	case *fluent.SessionMutation:
		return m.Filter(), nil
	case *fluent.TokenMutation:
		return m.Filter(), nil
	case *fluent.UserMutation:
		return m.Filter(), nil
	default:
		return nil, Denyf("ent/privacy: unexpected mutation type %T for mutation filter", m)
	}
}
