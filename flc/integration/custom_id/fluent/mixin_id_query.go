// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package fluent

import (
	"context"
	"fmt"
	"math"

	"github.com/google/uuid"
	"github.com/usalko/fluent"
	"github.com/usalko/fluent/dialect/sql"
	"github.com/usalko/fluent/dialect/sql/sqlgraph"
	"github.com/usalko/fluent/flc/integration/custom_id/fluent/mixin_id"
	"github.com/usalko/fluent/flc/integration/custom_id/fluent/predicate"
	"github.com/usalko/fluent/schema/field"
)

// MixinIDQuery is the builder for querying MixinID entities.
type MixinIDQuery struct {
	config
	ctx        *QueryContext
	order      []mixin_id.OrderOption
	inters     []Interceptor
	predicates []predicate.MixinID
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the MixinIDQuery builder.
func (mi *MixinIDQuery) Where(ps ...predicate.MixinID) *MixinIDQuery {
	mi.predicates = append(mi.predicates, ps...)
	return mi
}

// Limit the number of records to be returned by this query.
func (mi *MixinIDQuery) Limit(limit int) *MixinIDQuery {
	mi.ctx.Limit = &limit
	return mi
}

// Offset to start from.
func (mi *MixinIDQuery) Offset(offset int) *MixinIDQuery {
	mi.ctx.Offset = &offset
	return mi
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (mi *MixinIDQuery) Unique(unique bool) *MixinIDQuery {
	mi.ctx.Unique = &unique
	return mi
}

// Order specifies how the records should be ordered.
func (mi *MixinIDQuery) Order(o ...mixin_id.OrderOption) *MixinIDQuery {
	mi.order = append(mi.order, o...)
	return mi
}

// First returns the first MixinID entity from the query.
// Returns a *NotFoundError when no MixinID was found.
func (mi *MixinIDQuery) First(ctx context.Context) (*MixinID, error) {
	nodes, err := mi.Limit(1).All(setContextOp(ctx, mi.ctx, fluent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{mixin_id.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (mi *MixinIDQuery) FirstX(ctx context.Context) *MixinID {
	node, err := mi.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first MixinID ID from the query.
// Returns a *NotFoundError when no MixinID ID was found.
func (mi *MixinIDQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = mi.Limit(1).IDs(setContextOp(ctx, mi.ctx, fluent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{mixin_id.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (mi *MixinIDQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := mi.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single MixinID entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one MixinID entity is found.
// Returns a *NotFoundError when no MixinID entities are found.
func (mi *MixinIDQuery) Only(ctx context.Context) (*MixinID, error) {
	nodes, err := mi.Limit(2).All(setContextOp(ctx, mi.ctx, fluent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{mixin_id.Label}
	default:
		return nil, &NotSingularError{mixin_id.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (mi *MixinIDQuery) OnlyX(ctx context.Context) *MixinID {
	node, err := mi.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only MixinID ID in the query.
// Returns a *NotSingularError when more than one MixinID ID is found.
// Returns a *NotFoundError when no entities are found.
func (mi *MixinIDQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = mi.Limit(2).IDs(setContextOp(ctx, mi.ctx, fluent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{mixin_id.Label}
	default:
		err = &NotSingularError{mixin_id.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (mi *MixinIDQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := mi.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of MixinIDs.
func (mi *MixinIDQuery) All(ctx context.Context) ([]*MixinID, error) {
	ctx = setContextOp(ctx, mi.ctx, fluent.OpQueryAll)
	if err := mi.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*MixinID, *MixinIDQuery]()
	return withInterceptors[[]*MixinID](ctx, mi, qr, mi.inters)
}

// AllX is like All, but panics if an error occurs.
func (mi *MixinIDQuery) AllX(ctx context.Context) []*MixinID {
	nodes, err := mi.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of MixinID IDs.
func (mi *MixinIDQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if mi.ctx.Unique == nil && mi.path != nil {
		mi.Unique(true)
	}
	ctx = setContextOp(ctx, mi.ctx, fluent.OpQueryIDs)
	if err = mi.Select(mixin_id.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (mi *MixinIDQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := mi.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (mi *MixinIDQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, mi.ctx, fluent.OpQueryCount)
	if err := mi.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, mi, querierCount[*MixinIDQuery](), mi.inters)
}

// CountX is like Count, but panics if an error occurs.
func (mi *MixinIDQuery) CountX(ctx context.Context) int {
	count, err := mi.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (mi *MixinIDQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, mi.ctx, fluent.OpQueryExist)
	switch _, err := mi.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("fluent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (mi *MixinIDQuery) ExistX(ctx context.Context) bool {
	exist, err := mi.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the MixinIDQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (mi *MixinIDQuery) Clone() *MixinIDQuery {
	if mi == nil {
		return nil
	}
	return &MixinIDQuery{
		config:     mi.config,
		ctx:        mi.ctx.Clone(),
		order:      append([]mixin_id.OrderOption{}, mi.order...),
		inters:     append([]Interceptor{}, mi.inters...),
		predicates: append([]predicate.MixinID{}, mi.predicates...),
		// clone intermediate query.
		sql:  mi.sql.Clone(),
		path: mi.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		SomeField string `json:"some_field,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.MixinID.Query().
//		GroupBy(mixin_id.FieldSomeField).
//		Aggregate(fluent.Count()).
//		Scan(ctx, &v)
func (mi *MixinIDQuery) GroupBy(field string, fields ...string) *MixinIDGroupBy {
	mi.ctx.Fields = append([]string{field}, fields...)
	grbuild := &MixinIDGroupBy{build: mi}
	grbuild.flds = &mi.ctx.Fields
	grbuild.label = mixin_id.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		SomeField string `json:"some_field,omitempty"`
//	}
//
//	client.MixinID.Query().
//		Select(mixin_id.FieldSomeField).
//		Scan(ctx, &v)
func (mi *MixinIDQuery) Select(fields ...string) *MixinIDSelect {
	mi.ctx.Fields = append(mi.ctx.Fields, fields...)
	sbuild := &MixinIDSelect{MixinIDQuery: mi}
	sbuild.label = mixin_id.Label
	sbuild.flds, sbuild.scan = &mi.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a MixinIDSelect configured with the given aggregations.
func (mi *MixinIDQuery) Aggregate(fns ...AggregateFunc) *MixinIDSelect {
	return mi.Select().Aggregate(fns...)
}

func (mi *MixinIDQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range mi.inters {
		if inter == nil {
			return fmt.Errorf("fluent: uninitialized interceptor (forgotten import fluent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, mi); err != nil {
				return err
			}
		}
	}
	for _, f := range mi.ctx.Fields {
		if !mixin_id.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("fluent: invalid field %q for query", f)}
		}
	}
	if mi.path != nil {
		prev, err := mi.path(ctx)
		if err != nil {
			return err
		}
		mi.sql = prev
	}
	return nil
}

func (mi *MixinIDQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*MixinID, error) {
	var (
		nodes = []*MixinID{}
		_spec = mi.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*MixinID).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &MixinID{config: mi.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, mi.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (mi *MixinIDQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := mi.querySpec()
	_spec.Node.Columns = mi.ctx.Fields
	if len(mi.ctx.Fields) > 0 {
		_spec.Unique = mi.ctx.Unique != nil && *mi.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, mi.driver, _spec)
}

func (mi *MixinIDQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(mixin_id.Table, mixin_id.Columns, sqlgraph.NewFieldSpec(mixin_id.FieldID, field.TypeUUID))
	_spec.From = mi.sql
	if unique := mi.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if mi.path != nil {
		_spec.Unique = true
	}
	if fields := mi.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, mixin_id.FieldID)
		for i := range fields {
			if fields[i] != mixin_id.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := mi.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := mi.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := mi.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := mi.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (mi *MixinIDQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(mi.driver.Dialect())
	t1 := builder.Table(mixin_id.Table)
	columns := mi.ctx.Fields
	if len(columns) == 0 {
		columns = mixin_id.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if mi.sql != nil {
		selector = mi.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if mi.ctx.Unique != nil && *mi.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range mi.predicates {
		p(selector)
	}
	for _, p := range mi.order {
		p(selector)
	}
	if offset := mi.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := mi.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// MixinIDGroupBy is the group-by builder for MixinID entities.
type MixinIDGroupBy struct {
	selector
	build *MixinIDQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (mib *MixinIDGroupBy) Aggregate(fns ...AggregateFunc) *MixinIDGroupBy {
	mib.fns = append(mib.fns, fns...)
	return mib
}

// Scan applies the selector query and scans the result into the given value.
func (mib *MixinIDGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, mib.build.ctx, fluent.OpQueryGroupBy)
	if err := mib.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*MixinIDQuery, *MixinIDGroupBy](ctx, mib.build, mib, mib.build.inters, v)
}

func (mib *MixinIDGroupBy) sqlScan(ctx context.Context, root *MixinIDQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(mib.fns))
	for _, fn := range mib.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*mib.flds)+len(mib.fns))
		for _, f := range *mib.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*mib.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := mib.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// MixinIDSelect is the builder for selecting fields of MixinID entities.
type MixinIDSelect struct {
	*MixinIDQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (mi *MixinIDSelect) Aggregate(fns ...AggregateFunc) *MixinIDSelect {
	mi.fns = append(mi.fns, fns...)
	return mi
}

// Scan applies the selector query and scans the result into the given value.
func (mi *MixinIDSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, mi.ctx, fluent.OpQuerySelect)
	if err := mi.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*MixinIDQuery, *MixinIDSelect](ctx, mi.MixinIDQuery, mi, mi.inters, v)
}

func (mi *MixinIDSelect) sqlScan(ctx context.Context, root *MixinIDQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(mi.fns))
	for _, fn := range mi.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*mi.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := mi.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
