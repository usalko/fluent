// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package fluent

import (
	"context"

	"github.com/usalko/fluent/dialect/sql"
	"github.com/usalko/fluent/dialect/sql/sqlgraph"
	"github.com/usalko/fluent/flc/integration/custom_id/fluent/int_sid"
	"github.com/usalko/fluent/flc/integration/custom_id/fluent/predicate"
	"github.com/usalko/fluent/schema/field"
)

// IntSIDDelete is the builder for deleting a IntSID entity.
type IntSIDDelete struct {
	config
	hooks    []Hook
	mutation *IntSIDMutation
}

// Where appends a list predicates to the IntSIDDelete builder.
func (is *IntSIDDelete) Where(ps ...predicate.IntSID) *IntSIDDelete {
	is.mutation.Where(ps...)
	return is
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (is *IntSIDDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, is.sqlExec, is.mutation, is.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (is *IntSIDDelete) ExecX(ctx context.Context) int {
	n, err := is.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (is *IntSIDDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(int_sid.Table, sqlgraph.NewFieldSpec(int_sid.FieldID, field.TypeInt64))
	if ps := is.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, is.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	is.mutation.done = true
	return affected, err
}

// IntSIDDeleteOne is the builder for deleting a single IntSID entity.
type IntSIDDeleteOne struct {
	is *IntSIDDelete
}

// Where appends a list predicates to the IntSIDDelete builder.
func (iso *IntSIDDeleteOne) Where(ps ...predicate.IntSID) *IntSIDDeleteOne {
	iso.is.mutation.Where(ps...)
	return iso
}

// Exec executes the deletion query.
func (iso *IntSIDDeleteOne) Exec(ctx context.Context) error {
	n, err := iso.is.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{int_sid.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (iso *IntSIDDeleteOne) ExecX(ctx context.Context) {
	if err := iso.Exec(ctx); err != nil {
		panic(err)
	}
}
