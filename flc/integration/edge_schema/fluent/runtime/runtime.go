// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package runtime

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/usalko/fluent/flc/integration/edge_schema/fluent/attached_file"
	"github.com/usalko/fluent/flc/integration/edge_schema/fluent/friendship"
	"github.com/usalko/fluent/flc/integration/edge_schema/fluent/group"
	"github.com/usalko/fluent/flc/integration/edge_schema/fluent/relationship"
	"github.com/usalko/fluent/flc/integration/edge_schema/fluent/role"
	"github.com/usalko/fluent/flc/integration/edge_schema/fluent/role_user"
	"github.com/usalko/fluent/flc/integration/edge_schema/fluent/schema"
	"github.com/usalko/fluent/flc/integration/edge_schema/fluent/tweet_like"
	"github.com/usalko/fluent/flc/integration/edge_schema/fluent/tweet_tag"
	"github.com/usalko/fluent/flc/integration/edge_schema/fluent/user"
	"github.com/usalko/fluent/flc/integration/edge_schema/fluent/user_group"
	"github.com/usalko/fluent/flc/integration/edge_schema/fluent/user_tweet"

	"github.com/usalko/fluent"
	"github.com/usalko/fluent/privacy"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	attached_fileFields := schema.AttachedFile{}.Fields()
	_ = attached_fileFields
	// attached_fileDescAttachTime is the schema descriptor for attach_time field.
	attached_fileDescAttachTime := attached_fileFields[0].Descriptor()
	// attached_file.DefaultAttachTime holds the default value on creation for the attach_time field.
	attached_file.DefaultAttachTime = attached_fileDescAttachTime.Default.(func() time.Time)
	friendshipFields := schema.Friendship{}.Fields()
	_ = friendshipFields
	// friendshipDescWeight is the schema descriptor for weight field.
	friendshipDescWeight := friendshipFields[0].Descriptor()
	// friendship.DefaultWeight holds the default value on creation for the weight field.
	friendship.DefaultWeight = friendshipDescWeight.Default.(int)
	// friendshipDescCreatedAt is the schema descriptor for created_at field.
	friendshipDescCreatedAt := friendshipFields[1].Descriptor()
	// friendship.DefaultCreatedAt holds the default value on creation for the created_at field.
	friendship.DefaultCreatedAt = friendshipDescCreatedAt.Default.(func() time.Time)
	groupFields := schema.Group{}.Fields()
	_ = groupFields
	// groupDescName is the schema descriptor for name field.
	groupDescName := groupFields[0].Descriptor()
	// group.DefaultName holds the default value on creation for the name field.
	group.DefaultName = groupDescName.Default.(string)
	relationship.Policy = privacy.NewPolicies(schema.Relationship{})
	relationship.Hooks[0] = func(next fluent.Mutator) fluent.Mutator {
		return fluent.MutateFunc(func(ctx context.Context, m fluent.Mutation) (fluent.Value, error) {
			if err := relationship.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	relationshipFields := schema.Relationship{}.Fields()
	_ = relationshipFields
	// relationshipDescWeight is the schema descriptor for weight field.
	relationshipDescWeight := relationshipFields[0].Descriptor()
	// relationship.DefaultWeight holds the default value on creation for the weight field.
	relationship.DefaultWeight = relationshipDescWeight.Default.(int)
	roleFields := schema.Role{}.Fields()
	_ = roleFields
	// roleDescCreatedAt is the schema descriptor for created_at field.
	roleDescCreatedAt := roleFields[1].Descriptor()
	// role.DefaultCreatedAt holds the default value on creation for the created_at field.
	role.DefaultCreatedAt = roleDescCreatedAt.Default.(func() time.Time)
	role_userFields := schema.RoleUser{}.Fields()
	_ = role_userFields
	// role_userDescCreatedAt is the schema descriptor for created_at field.
	role_userDescCreatedAt := role_userFields[0].Descriptor()
	// role_user.DefaultCreatedAt holds the default value on creation for the created_at field.
	role_user.DefaultCreatedAt = role_userDescCreatedAt.Default.(func() time.Time)
	tweet_like.Policy = privacy.NewPolicies(schema.TweetLike{})
	tweet_like.Hooks[0] = func(next fluent.Mutator) fluent.Mutator {
		return fluent.MutateFunc(func(ctx context.Context, m fluent.Mutation) (fluent.Value, error) {
			if err := tweet_like.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	tweet_likeFields := schema.TweetLike{}.Fields()
	_ = tweet_likeFields
	// tweet_likeDescLikedAt is the schema descriptor for liked_at field.
	tweet_likeDescLikedAt := tweet_likeFields[0].Descriptor()
	// tweet_like.DefaultLikedAt holds the default value on creation for the liked_at field.
	tweet_like.DefaultLikedAt = tweet_likeDescLikedAt.Default.(func() time.Time)
	tweet_tagFields := schema.TweetTag{}.Fields()
	_ = tweet_tagFields
	// tweet_tagDescAddedAt is the schema descriptor for added_at field.
	tweet_tagDescAddedAt := tweet_tagFields[1].Descriptor()
	// tweet_tag.DefaultAddedAt holds the default value on creation for the added_at field.
	tweet_tag.DefaultAddedAt = tweet_tagDescAddedAt.Default.(func() time.Time)
	// tweet_tagDescID is the schema descriptor for id field.
	tweet_tagDescID := tweet_tagFields[0].Descriptor()
	// tweet_tag.DefaultID holds the default value on creation for the id field.
	tweet_tag.DefaultID = tweet_tagDescID.Default.(func() uuid.UUID)
	user.Policy = privacy.NewPolicies(schema.User{})
	user.Hooks[0] = func(next fluent.Mutator) fluent.Mutator {
		return fluent.MutateFunc(func(ctx context.Context, m fluent.Mutation) (fluent.Value, error) {
			if err := user.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescName is the schema descriptor for name field.
	userDescName := userFields[0].Descriptor()
	// user.DefaultName holds the default value on creation for the name field.
	user.DefaultName = userDescName.Default.(string)
	user_groupFields := schema.UserGroup{}.Fields()
	_ = user_groupFields
	// user_groupDescJoinedAt is the schema descriptor for joined_at field.
	user_groupDescJoinedAt := user_groupFields[0].Descriptor()
	// user_group.DefaultJoinedAt holds the default value on creation for the joined_at field.
	user_group.DefaultJoinedAt = user_groupDescJoinedAt.Default.(func() time.Time)
	user_tweetFields := schema.UserTweet{}.Fields()
	_ = user_tweetFields
	// user_tweetDescCreatedAt is the schema descriptor for created_at field.
	user_tweetDescCreatedAt := user_tweetFields[0].Descriptor()
	// user_tweet.DefaultCreatedAt holds the default value on creation for the created_at field.
	user_tweet.DefaultCreatedAt = user_tweetDescCreatedAt.Default.(func() time.Time)
}

const (
	Version = "v0.1.7" // Version of fluent codegen.
)
