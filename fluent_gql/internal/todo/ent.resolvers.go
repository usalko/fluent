// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package todo

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.48

import (
	"context"

	"github.com/usalko/fluent/fluent_gql"
	"github.com/usalko/fluent/fluent_gql/internal/todo/fluent"
)

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id int) (fluent.Noder, error) {
	return r.client.Noder(ctx, id)
}

// Nodes is the resolver for the nodes field.
func (r *queryResolver) Nodes(ctx context.Context, ids []int) ([]fluent.Noder, error) {
	return r.client.Noders(ctx, ids)
}

// BillProducts is the resolver for the billProducts field.
func (r *queryResolver) BillProducts(ctx context.Context) ([]*fluent.BillProduct, error) {
	return r.client.BillProduct.Query().All(ctx)
}

// Categories is the resolver for the categories field.
func (r *queryResolver) Categories(ctx context.Context, after *fluent_gql.Cursor[int], first *int, before *fluent_gql.Cursor[int], last *int, orderBy []*fluent.CategoryOrder, where *fluent.CategoryWhereInput) (*fluent.CategoryConnection, error) {
	return r.client.Category.Query().
		Paginate(ctx, after, first, before, last,
			fluent.WithCategoryOrder(orderBy),
			fluent.WithCategoryFilter(where.Filter),
		)
}

// Groups is the resolver for the groups field.
func (r *queryResolver) Groups(ctx context.Context, after *fluent_gql.Cursor[int], first *int, before *fluent_gql.Cursor[int], last *int, where *fluent.GroupWhereInput) (*fluent.GroupConnection, error) {
	return r.client.Group.Query().
		Paginate(ctx, after, first, before, last,
			fluent.WithGroupFilter(where.Filter),
		)
}

// OneToMany is the resolver for the oneToMany field.
func (r *queryResolver) OneToMany(ctx context.Context, after *fluent_gql.Cursor[int], first *int, before *fluent_gql.Cursor[int], last *int, orderBy *fluent.OneToManyOrder, where *fluent.OneToManyWhereInput) (*fluent.OneToManyConnection, error) {
	return r.client.OneToMany.Query().
		Paginate(ctx, after, first, before, last,
			fluent.WithOneToManyFilter(where.Filter),
		)
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context, after *fluent_gql.Cursor[int], first *int, before *fluent_gql.Cursor[int], last *int, orderBy []*fluent.TodoOrder, where *fluent.TodoWhereInput) (*fluent.TodoConnection, error) {
	return r.client.Todo.Query().
		Paginate(ctx, after, first, before, last,
			fluent.WithTodoOrder(orderBy),
			fluent.WithTodoFilter(where.Filter),
		)
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, after *fluent_gql.Cursor[int], first *int, before *fluent_gql.Cursor[int], last *int, orderBy *fluent.UserOrder, where *fluent.UserWhereInput) (*fluent.UserConnection, error) {
	return r.client.User.Query().
		Paginate(ctx, after, first, before, last,
			fluent.WithUserFilter(where.Filter),
		)
}

// Category returns CategoryResolver implementation.
func (r *Resolver) Category() CategoryResolver { return &categoryResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Todo returns TodoResolver implementation.
func (r *Resolver) Todo() TodoResolver { return &todoResolver{r} }

// CreateCategoryInput returns CreateCategoryInputResolver implementation.
func (r *Resolver) CreateCategoryInput() CreateCategoryInputResolver {
	return &createCategoryInputResolver{r}
}

// TodoWhereInput returns TodoWhereInputResolver implementation.
func (r *Resolver) TodoWhereInput() TodoWhereInputResolver { return &todoWhereInputResolver{r} }

type categoryResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type todoResolver struct{ *Resolver }
type createCategoryInputResolver struct{ *Resolver }
type todoWhereInputResolver struct{ *Resolver }
